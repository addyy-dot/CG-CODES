#include <bits/stdc++.h>
#include <GL/glut.h>
#define W 800
#define H 800
using namespace std;

GLint startX, startY, endX, endY;

void setpixel(GLint x, GLint y) {
    glColor3f(1.0, 0.0, 0.0);
    glBegin(GL_POINTS);
    glVertex2i(x, y); // changed to glVertex2i for integer input
    glEnd();
    glFlush();
}

class Line {
public:
    void DDA(int choice) {
        GLfloat dx = endX - startX;
        GLfloat dy = endY - startY;
        GLfloat steps;

        if (abs(dx) > abs(dy)) {
            steps = abs(dx);
        } else {
            steps = abs(dy); // fixed: should use abs(dy)
        }

        GLfloat x_inc = dx / steps;
        GLfloat y_inc = dy / steps;
        GLfloat x = startX;
        GLfloat y = startY;

        setpixel(round(x), round(y));

        for (int i = 0; i < steps; i++) {
            x += x_inc;
            y += y_inc;

            if (choice == 1) {
                setpixel(round(x), round(y));
            } else if (choice == 2) {
                if (i % 5 == 0) setpixel(round(x), round(y));
            } else if (choice == 3) {
                if (i % 10 < 5) setpixel(round(x), round(y));
            } else if (choice == 4) {
                glPointSize(4.0);
                setpixel(round(x), round(y));
            }
        }
    }
}; // fixed: closed the class definition

Line obj;

void initialize() {
    glClearColor(1.0, 1.0, 1.0, 0.0); // background white
    glClear(GL_COLOR_BUFFER_BIT);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(-W / 2, W / 2, -H / 2, H / 2);
}

void choice() {
    glPointSize(2.0);
    for (int i = -W; i < W; i++) {
        setpixel(i, 0);
        setpixel(0, i);
    }
}

void mouse(int button, int state, int x, int y) {
    if (state == GLUT_DOWN) {
        if (button == GLUT_LEFT_BUTTON) {
            startX = x - W / 2;
            startY = H / 2 - y;
            glPointSize(2.0);
            setpixel(startX, startY);
        } else if (button == GLUT_RIGHT_BUTTON) {
            endX = x - W / 2;
            endY = H / 2 - y;
            glPointSize(2.0);
            setpixel(endX, endY);
        }
    }
}

void keyboard(unsigned char key, int x, int y) {
    if (key == 27) { // ESC key
        exit(0);
    }
}

void menu(int choice) {
    if (choice == 5) {
        exit(0);
    } else if (choice < 5) { // fixed: added 'if'
        obj.DDA(choice);
    }
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);

    glutInitWindowSize(800, 800);
    glutInitWindowPosition(100, 0);
    glutCreateWindow("Line Drawing Algorithm");
    initialize();

    glutDisplayFunc(choice);
    glutMouseFunc(mouse);
    glutKeyboardFunc(keyboard);

    glutCreateMenu(menu);
    glutAddMenuEntry("DDA simple", 1);
    glutAddMenuEntry("DDA dotted", 2);
    glutAddMenuEntry("DDA dashed", 3);
    glutAddMenuEntry("DDA solid", 4);
    glutAddMenuEntry("Exit", 5);
    glutAttachMenu(GLUT_MIDDLE_BUTTON);

    glutMainLoop();
    return 0;
}

#include <GL/glut.h>

int winW = 500, winH = 500;

int points[3][2]; // Replaces vx and vy
int pointCount = 0;
bool drawn = false;

void drawTriangle() {
    glColor3f(0, 0, 0);
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i < 3; i++)
        glVertex2i(points[i][0], points[i][1]);
    glEnd();
    glFlush();
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT);
    if (drawn) drawTriangle();
}

void mouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN && !drawn) {
        points[pointCount][0] = x;
        points[pointCount][1] = winH - y;
        pointCount++;
        if (pointCount == 3) {
            drawn = true;
        }
        display();
    }
}

void floodFillUtil(int x, int y, const float oldC[3], const float newC[3]) {
    float c[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, c);
    if (c[0] == oldC[0] && c[1] == oldC[1] && c[2] == oldC[2]) {
        glColor3fv(newC);
        glBegin(GL_POINTS);
        glVertex2i(x, y);
        glEnd();
        glFlush();
        floodFillUtil(x + 1, y, oldC, newC);
        floodFillUtil(x - 1, y, oldC, newC);
        floodFillUtil(x, y + 1, oldC, newC);
        floodFillUtil(x, y - 1, oldC, newC);
    }
}

void doFloodFill() {
    int cx = (points[0][0] + points[1][0] + points[2][0]) / 3;
    int cy = (points[0][1] + points[1][1] + points[2][1]) / 3;
    float oldC[3] = {1, 1, 1};
    float newC[3] = {1, 0, 0};
    floodFillUtil(cx, cy, oldC, newC);
}

void boundaryFillUtil(int x, int y, const float fillC[3], const float boundC[3]) {
    float c[3];
    glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, c);
    bool isBoundary = (c[0] == boundC[0] && c[1] == boundC[1] && c[2] == boundC[2]);
    bool isFilled = (c[0] == fillC[0] && c[1] == fillC[1] && c[2] == fillC[2]);
    if (!isBoundary && !isFilled) {
        glColor3fv(fillC);
        glBegin(GL_POINTS);
        glVertex2i(x, y);
        glEnd();
        glFlush();
        boundaryFillUtil(x + 1, y, fillC, boundC);
        boundaryFillUtil(x - 1, y, fillC, boundC);
        boundaryFillUtil(x, y + 1, fillC, boundC);
        boundaryFillUtil(x, y - 1, fillC, boundC);
    }
}

void doBoundaryFill() {
    int cx = (points[0][0] + points[1][0] + points[2][0]) / 3;
    int cy = (points[0][1] + points[1][1] + points[2][1]) / 3;
    float fillC[3] = {0, 0, 1};
    float boundC[3] = {0, 0, 0};
    boundaryFillUtil(cx, cy, fillC, boundC);
}

void menu(int id) {
    if (id == 1) doFloodFill();
    else if (id == 2) doBoundaryFill();
}

int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(winW, winH);
    glutCreateWindow("Interactive Triangle Fill");

    glMatrixMode(GL_PROJECTION);
    glClearColor(1, 1, 1, 1);
    glLoadIdentity();
    gluOrtho2D(0, winW, 0, winH);

    glutDisplayFunc(display);
    glutMouseFunc(mouse);
    glutCreateMenu(menu);
    glutAddMenuEntry("Flood Fill", 1);
    glutAddMenuEntry("Boundary Fill", 2);
    glutAttachMenu(GLUT_RIGHT_BUTTON);

    glutMainLoop();
    return 0;
}
